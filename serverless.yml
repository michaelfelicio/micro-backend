service: micro-backend

custom:
  bucket: microbackend
  prefix: uuid
  dynamoDBTableName: "${opt:stage, self:provider.stage}_microbackend"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dynamodb-local

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:custom.dynamoDBTableName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.dynamoDBTableName}"
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: "arn:aws:s3:::${self:custom.bucket}/${self:custom.prefix}/${self:custom.dynamoDBTableName}/*"
        - Effect: Allow
          Action:
            - "dynamodb:GetRecords"
            - "dynamodb:GetShardIterator"
            - "dynamodb:DescribeStream"
            - "dynamodb:ListStreams"
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.dynamoDBTableName}/stream/*"

functions: 
  get:
    handler: app/handler.get
    events:
      - http:
          path: uuid
          method: get
          cors: true    
  backup:
    handler: app/handler.backup
    environment:
      STAGE: "${opt:stage, self:provider.stage}"
      BUCKET: "${self:custom.bucket}"
      TABLE: "${self:custom.dynamoDBTableName}"
      PREFIX: "${self:custom.prefix}"
    timeout: 300

resources:
  Resources:
    UuidDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        TableName: ${self:custom.dynamoDBTableName}